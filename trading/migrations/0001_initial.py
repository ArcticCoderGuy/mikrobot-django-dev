# Generated by Django 5.2.4 on 2025-07-11 10:15

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('signals', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Trade',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('mt5_ticket', models.BigIntegerField(help_text='MetaTrader 5 ticket number', unique=True)),
                ('mt5_order_type', models.CharField(help_text='ORDER_TYPE_BUY, ORDER_TYPE_SELL, etc.', max_length=20)),
                ('symbol', models.CharField(max_length=20)),
                ('direction', models.CharField(choices=[('BUY', 'Buy'), ('SELL', 'Sell')], max_length=4)),
                ('entry_price', models.DecimalField(decimal_places=5, help_text='Actual entry price executed', max_digits=10)),
                ('exit_price', models.DecimalField(blank=True, decimal_places=5, help_text='Actual exit price (when closed)', max_digits=10, null=True)),
                ('stop_loss', models.DecimalField(decimal_places=5, max_digits=10)),
                ('take_profit', models.DecimalField(decimal_places=5, max_digits=10)),
                ('volume', models.DecimalField(decimal_places=2, help_text='Actual lot size traded', max_digits=8)),
                ('status', models.CharField(choices=[('pending', 'Pending Execution'), ('opened', 'Position Open'), ('closed_profit', 'Closed with Profit'), ('closed_loss', 'Closed with Loss'), ('closed_breakeven', 'Closed at Breakeven'), ('cancelled', 'Cancelled'), ('error', 'Execution Error')], default='pending', max_length=20)),
                ('gross_profit_loss', models.DecimalField(blank=True, decimal_places=2, help_text='Gross P&L in account currency', max_digits=10, null=True)),
                ('commission', models.DecimalField(decimal_places=2, default=0.0, help_text='Broker commission', max_digits=8)),
                ('swap', models.DecimalField(decimal_places=2, default=0.0, help_text='Overnight swap charges', max_digits=8)),
                ('net_profit_loss', models.DecimalField(blank=True, decimal_places=2, help_text='Net P&L after commission and swap', max_digits=10, null=True)),
                ('signal_time', models.DateTimeField(help_text='When signal was created')),
                ('execution_time', models.DateTimeField(blank=True, help_text='When trade was opened in MT5', null=True)),
                ('close_time', models.DateTimeField(blank=True, help_text='When trade was closed in MT5', null=True)),
                ('duration_minutes', models.IntegerField(blank=True, help_text='How long trade was open (minutes)', null=True)),
                ('max_drawdown', models.DecimalField(blank=True, decimal_places=2, help_text='Maximum unrealized loss during trade', max_digits=8, null=True)),
                ('max_profit', models.DecimalField(blank=True, decimal_places=2, help_text='Maximum unrealized profit during trade', max_digits=8, null=True)),
                ('exit_reason', models.CharField(blank=True, choices=[('take_profit', 'Take Profit Hit'), ('stop_loss', 'Stop Loss Hit'), ('manual', 'Manual Close'), ('trailing_stop', 'Trailing Stop'), ('time_exit', 'Time-based Exit'), ('risk_management', 'Risk Management Override'), ('market_close', 'Market Close')], max_length=20, null=True)),
                ('django_decision_time', models.DateTimeField(auto_now_add=True, help_text='When Django made the trade decision')),
                ('execution_delay_seconds', models.IntegerField(blank=True, help_text='Delay between signal and execution', null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this trade')),
                ('mql5_signal', models.OneToOneField(help_text='Original signal that created this trade', on_delete=django.db.models.deletion.CASCADE, related_name='trade', to='signals.mql5signal')),
            ],
            options={
                'verbose_name': 'Trade',
                'verbose_name_plural': 'Trades',
                'ordering': ['-execution_time'],
            },
        ),
        migrations.CreateModel(
            name='TradingSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_name', models.CharField(help_text="e.g. 'London Open', 'NY Session'", max_length=100)),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('total_trades', models.IntegerField(default=0)),
                ('winning_trades', models.IntegerField(default=0)),
                ('losing_trades', models.IntegerField(default=0)),
                ('total_pnl', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('max_concurrent_trades', models.IntegerField(default=0)),
                ('max_drawdown_session', models.DecimalField(decimal_places=2, max_digits=8, null=True)),
                ('trades', models.ManyToManyField(blank=True, related_name='trading_sessions', to='trading.trade')),
            ],
            options={
                'ordering': ['-start_time'],
            },
        ),
    ]
